// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId   Int    @id @default(autoincrement()) @map("userId")
  email    String @unique @map("email")
  password String @map("password")
  name     String @map("name")
  role     role   @map("role")
  point    Int    @map("point")

  createdAt DateTime @default(now()) @map("createdAt")

  stores Stores?
  orders Orders[]
  reviews Reviews[]
}

model Stores {
  storeId   Int      @id @default(autoincrement()) @map("storeId")
  userId    Int      @map("userId") @unique
  category  category @map("category")
  storeName String   @map("storeName")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  menus Menus[]
  orders Orders[]
  reviews Reviews[]

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Menus {
  menuId    Int    @id @default(autoincrement()) @map("userId")
  storeId   Int    @map("storeId")
  menuName  String @map("menuName")
  menuImage String @map("menuImage")
  price     Int    @map("price")
  content   String @map("content")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  stores Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
}

model Orders {
  orderId Int    @id @default(autoincrement()) @map("orderId")
  userId  Int    @map("userId")
  storeId Int    @map("storeId")
  status  status @default(order) @map("status")

  createdAt DateTime @default(now()) @map("createdAt")


  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  stores Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
}

model Reviews {
  reviewId Int @id @default(autoincrement()) @map("reviewId")
  userId   Int @map("userId")
  storeId  Int @map("storeId")
  reviewContent String @map("reviewContent")
  rating  Int @map("rating")
  
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  stores Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
}

enum role {
  user
  owner
}

enum category {
  korean
  asian
  china
  japan
  western
  fastfood
  chicken
  pizza
}

enum status {
  order
  delivering
  success
  cancel
}
